#ifndef EventGeneratorInternalPairFormation_H
#define EventGeneratorInternalPairFormation_H
/*****************************************************************************
 * Copyright (C) 2009-2013   this file is part of the NPTool Project         *
 *                                                                           *
 * For the licensing terms see $NPTOOL/Licence/NPTool_Licence                *
 * For the list of contributors see $NPTOOL/Licence/Contributors             *
 *****************************************************************************/

/*****************************************************************************
 *          Author: Mohamad Moukaddam  contact address: moukaddam@triumf.ca  *
 * class structure based on other generators from                            *
 * Original Author: Adrien MATTA  contact address: matta@ipno.in2p3.fr       *                                                                         *
 * Creation Date  : Apr 2014                                                 *
 * Last update    :                                                          *
 *---------------------------------------------------------------------------*
 * Decription:                                                               *
 *  This event Generator is used to simulated an internal pair formation of  *
 *  nuclei generated by previous event generator. Multiple cases are 		 *
 *  supported:            													 *
 *  - E0, a Cross section can be given   						             *
 *  - E0, a Cross section calculated   						                 *
 *  - E{1,..,5} or M{1,..,5}  a Cross section calculated                     *
 *  - If more than one cascade are given, Branching Ratio could be given     *
 *                                                                           *
 *---------------------------------------------------------------------------*
 * Comment:                                                                  *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *****************************************************************************/

// STL
#include <string>
#include <iostream>
using namespace std;

// NPSimulation
#include "VEventGenerator.hh"
#include "Target.hh"
#include "ParticleStack.hh"

// ROOT
#include "TH1F.h"
#include "TH2F.h"
#include "TF2.h"




class EventGeneratorInternalPairFormation : public VEventGenerator{
public: // Constructor and destructor
  EventGeneratorInternalPairFormation();
  ~EventGeneratorInternalPairFormation();
  
public: // Inherit from VEventGenerator class
  void ReadConfiguration(string,int);
  void GenerateEvent(G4Event*);
  void SetTarget(Target* Target) ;
  
private: // Target Parameter
  Target* m_Target;
  
  
private: // The decaying nuclei
  string m_NucleiName;
private: // lepton conversion properties
  vector<double>  m_BranchingRatio;
  vector<double>  m_CascadeTotalEnergy;
  vector< vector<double> > m_Energies;
  vector< vector<string> > m_FieldTypes;
  vector< vector<double> > m_PolarityOrders;
  vector< vector<double> > m_InternalPairCoeff;
  vector< vector<double> > m_InternalElectronCoeff;
	  vector< vector<string> > m_CrossSectionLeptonPath;
	  vector< vector<string> > m_CrossSectionLeptonName;
	  vector< vector<TH2F*> >  m_CrossSectionLeptonHist2D; 	   // For internal pair formation distribution 
  
private: // Pointer to the Particle stack for faster acces
  ParticleStack* m_ParticleStack;

private: // Function providing the distribution of Internal Pair formation events d^2 Omega_{pi} / ( dE_{e+} dtheta_{s})
  TH2F* BuildCrossSection( double transition_energy, string field_type, double polarity_order, string HistName) ;
 double GetBornCrossSection(string field_type, double transition_energy_ratio, int multipolarity, double tot_energy_p, double tot_energy_m, double angle_positron_electron) ;

public: // Managing the different cascade
		// Add the information about a Lepton cascade			
   void AddLeptonCascade(vector<double> Energies, double BranchingRatio,
   					vector<string> FieldTypes, vector<double> PolarityOrders, 
					vector<double> InternalPairCoeff, vector<double> InternalElectronCoeff, 
					vector<string> InternalCSPairPath, vector<string> InternalCSPairName);  
										
  // Read all the added cscade en instentiate every thing that is needed
  void PrepareCascade();
};
#endif
