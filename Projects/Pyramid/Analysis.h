#ifndef Analysis_h 
#define Analysis_h
/*****************************************************************************
 * Copyright (C) 2009-2016    this file is part of the NPTool Project        *
 *                                                                           *
 * For the licensing terms see $NPTOOL/Licence/NPTool_Licence                *
 * For the list of contributors see $NPTOOL/Licence/Contributors             *
 *****************************************************************************/

/*****************************************************************************
 * Original Author: M. Moukaddam                                             *
 * contact address: mohamad.moukaddam@iphc.cnrs.fr                           *
 *                                                                           *
 * Creation Date  :  23 Nov 2018                                             *
 *---------------------------------------------------------------------------*
 * Decription:                                                               *
 *  This class describe  Pyramid analysis project                            *
 *                                                                           *
 *---------------------------------------------------------------------------*
 * Comment:                                                                  *
 *                                                                           *
 *****************************************************************************/

//Nptool
#include "NPVAnalysis.h"
#include "NPEnergyLoss.h"
#include "NPReaction.h"
#include "RootOutput.h"
#include "RootInput.h"
#include "TPyramidPhysics.h"
#include "TParisPhysics.h"
// Simulation Conditions
#include "TInitialConditions.h"
#include "TReactionConditions.h"
#include "TInteractionCoordinates.h"

//Root
#include "TRandom3.h"
#include "TVector3.h"
#include "TMath.h"
#include "TFile.h"
//#include "TCutG.h"
//#include "TList.h"
//#include "TH1F.h"
//#include "TH2F.h"

//c++
#include<fstream>
#include<vector>

class Analysis: public NPL::VAnalysis{
  public:
    Analysis();
    ~Analysis();

  public: 
    void Init();
    void TreatEvent();
    void End();

    void InitOutputBranch();
    void InitInputBranch();
    void ReInitValue();
    static NPL::VAnalysis* Construct();

  private:
    double Ex;
    double ELab;
    double ThetaLab;
    double ThetaCM;
    NPL::Reaction* Reaction;          // 12C(12C,12C)
    NPL::Reaction* ReactionCont;      // 12C(12C,4He)20Ne (check)
    NPL::Reaction* ReactionElast;     // 12C(12C,12C) Mott Scatt.

  //  Energy loss table: the G4Table are generated by the simulation
  EnergyLoss LightTarget; // the general light
  EnergyLoss LightAl;
  EnergyLoss LightSi;

  EnergyLoss HeavyTarget; // the general heavy
  EnergyLoss HeavyAl;
  EnergyLoss HeavySi;

  EnergyLoss alphaTarget;
  EnergyLoss alphaAl;
  EnergyLoss alphaSi;

  EnergyLoss CarbonTarget;
  EnergyLoss CarbonAl;
  EnergyLoss CarbonSi;

  EnergyLoss ContTarget;
  EnergyLoss ContAl;
  EnergyLoss ContSi;

  EnergyLoss BeamTarget;

  TVector3 BeamDirection;
  TVector3 TargetPosition;

  TRandom3 Rand ;
  int PyramidDetNumber  ;

  // Beam
  double OriginalBeamEnergy ; // AMEV
  
  // Target
  double TargetThickness ;
  double ThetaNormalTarget;
  double Energy ;
  
  //Pyramid
  double ThetaSharcSurface ;
  double X_Pyramid ;
  double Y_Pyramid ;
  double Z_Pyramid ;
  double ThetaDetector;
  double Si_E_Pyramid ;
  double Pad_E_Pyramid ;
  double LightDistance;// light particle distance from target to Si
  

  TPyramidPhysics* Pyramid;
  //Paris
    // goes here
  TParisPhysics* Paris;



  // stage specific data (before any analysis) copied from Pyramid physics, 
  TTree *EventsTree;
  TFile *EventsFile;
  vector<double> Detector_N ; // int produce problems,  for M1 analysis  
  vector<double> Strip_E;
  vector<double> Strip_T;
  vector<double> Strip_N;    // int produce problems,  for M1 analysis
  vector<double> DownStream_E;
  vector<double> DownStream_T;
  vector<double> UpStream_E;
  vector<double> UpStream_T;

  //Generated events
  double vertexX, vertexY, vertexZ;
  //double EmittanceThetaX, EmittancePhiY;
  //double EmittanceTheta, EmittancePhi;
  double thetaCM; 
  double thetaLab_BF_0,thetaLab_WF_0;
  double energy_0;
  double thetaLab_BF_1,thetaLab_WF_1;
  double energy_1;
    // detected particle
  vector<double> X_det;
  vector<double> Y_det;
  vector<double> Z_det;
  vector<double> Theta_det;
  vector<double> Phi_det;

  TInitialConditions* initCond ;
  TInteractionCoordinates* interCoord;
  TReactionConditions* reacCond;

};
#endif
