#ifndef Analysis_h 
#define Analysis_h
/*****************************************************************************
 * Copyright (C) 2009-2014    this file is part of the NPTool Project        *
 *                                                                           *
 * For the licensing terms see $NPTOOL/Licence/NPTool_Licence                *
 * For the list of contributors see $NPTOOL/Licence/Contributors             *
 *****************************************************************************/

/*****************************************************************************
 * Original Author: Adrien MATTA  contact address: a.matta@surrey.ac.uk      *
 *                                                                           *
 * Creation Date  : march 2025                                               *
 * Last update    :                                                          *
 *---------------------------------------------------------------------------*
 * Decription:                                                               *
 * Class describing the property of an Analysis object                       *
 *                                                                           *
 *---------------------------------------------------------------------------*
 * Comment:                                                                  *
 *                                                                           *
 *                                                                           *
 *****************************************************************************/
#include"NPVAnalysis.h"
#include"NPEnergyLoss.h"
#include"NPReaction.h"
#include"RootOutput.h"
#include"RootInput.h"
#include "Helios.h"
#include "TInitialConditions.h"
#include "TInteractionCoordinates.h"
#include <TRandom3.h>
#include <TVector3.h>
#include <TMath.h>


class Analysis: public NPL::VAnalysis{
  public:
    Analysis();
    ~Analysis();

  public: 
    void Init();
    void TreatEvent();
    void End();

  void InitOutputBranch();
  void InitInputBranch();
  void ReInitValue();
  static NPL::VAnalysis* Construct();

  void ZonBeamAxis (TVector3 A, double E, int q, double M, double B, double*, double*, double*) ;

  
  private:
  double Ex, QValue, Z_extrap;
  double ELab, EDep;
  double ThetaLab;
  double ThetaCM;
  NPL::Reaction* myReaction;

  TInitialConditions* myInit ;
  TInteractionCoordinates* myIntCoord ;

  //	Energy loss table: the G4Table are generated by the simulation
  EnergyLoss LightCD2;
  //EnergyLoss LightAl;
  //EnergyLoss LightSi;
  EnergyLoss BeamCD2;
  TVector3 BeamImpact;
  
  double TargetThickness ;
  // Beam Energy
  double OriginalBeamEnergy ; // AMEV
  // Light ejectile Charge and Mass
  int pCharge; 
  double pMass;
  // Nominal magnetic field
  double Bfield; 
                                                           // intermediate variable
  TRandom3 *Rand ;
  int DetectorNumber  ;
  double ThetaNormalTarget;

  
  double Energy ;

  double ThetaHelSurface ;
  double X_Hel ; 
  double Y_Hel ;
  double Z_Hel  ;
  double Si_E_Hel ;
  double E_Hel ;
  double Si_X_Hel ;
  double Si_Y_Hel ;

  Helios* Hel;
  
};
#endif
